# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TotalopenstationDialog
                                 A QGIS plugin
 Total Open Station (TOPS for friends) is a free software program for downloading and processing data from total station devices.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Enzo Cocca adArte srl; Stefano Costa
        email                : enzo.ccc@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import subprocess
import platform
import csv
import tempfile
from qgis.PyQt import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtCore import  pyqtSlot, pyqtSignal,QThread,QUrl,QSettings,Qt
from qgis.PyQt.QtWidgets import QApplication, QDialog, QMessageBox, QFileDialog,QLineEdit,QWidget,QCheckBox
from qgis.PyQt.QtSql import *
from qgis.PyQt.uic import loadUiType
from qgis.PyQt import  QtWidgets 
from qgis.core import  *
from qgis.gui import  *
from qgis.utils import iface


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'totalstation_dialog_base.ui'))


class TotalopenstationDialog(QtWidgets.QDialog, FORM_CLASS):
    
    
    def __init__(self, parent=None):
        """Constructor."""
        super(TotalopenstationDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.model = QtGui.QStandardItemModel(self)
        self.tableView.setModel(self.model)
        self.toolButton_input.clicked.connect(self.setPathinput)
        self.toolButton_output.clicked.connect(self.setPathoutput)
        self.toolButton_save_raw.clicked.connect(self.setPathsaveraw)
        self.mSerialSettingsGroup.setHidden(True)
        self.comboBox_model.currentIndexChanged.connect(self.tt)
    def tt(self):    
        if self.comboBox_model.currentIndex()!=6:
            
            self.mSerialSettingsGroup.setHidden(True)
        else:
            
            self.mSerialSettingsGroup.show()
        #self.format_()
    
    # def format_(self):
        # if self.comboBox_format.currentIndex()==0:
            # return 'tsj'
    
        # if self.comboBox_format.currentText()==1:
            # return 'gsi'
    
        # if self.comboBox_format.currentText()==4:
            # return 'v200'
        
        # if self.comboBox_format.currentText()==5:
            # return 'sdr'
    
        # if self.comboBox_format.currentText()==6:
            # return 'are'
    
        # if self.comboBox_format.currentText()==7 :
            # return '*'
    
        # if self.comboBox_format.currentText()==9 :
            # return 'rw5'
    def setPathinput(self):
        s = QgsSettings()
        input_ = QFileDialog.getOpenFileName(
            self,
            "Set file name",
            '',
            "(*.*)"
        )[0]
        #filename=dbpath.split("/")[-1]
        if input_:

            self.lineEdit_input.setText(input_)
            s.setValue('',input_)
            # r=open(self.lineEdit_input.text(),'r')
            # lines = r.read().split(',')
            # self.textEdit.setText(str(lines))
    
    
    
    def setPathoutput(self):
        s = QgsSettings()
        output_ = QFileDialog.getSaveFileName(
            self,
            "Set file name",
            '',
            "(*.{})".format(self.comboBox_format2.currentText())
        )[0]
        #filename=dbpath.split("/")[-1]
        if output_:

            self.lineEdit_output.setText(output_)
            s.setValue('',output_)
            
    def setPathsaveraw(self):
        s = QgsSettings()
        output_ = QFileDialog.getSaveFileName(
            self,
            "Set file name",
            '',
            "(*.csv)"
        )[0]
        #filename=dbpath.split("/")[-1]
        if output_:

            self.lineEdit_save_raw.setText(output_)
            s.setValue('',output_)
    
    def loadCsv(self, fileName):
        self.tableView.clearSpans()
        with open(fileName, "r") as fileInput:
            for row in csv.reader(fileInput):    
                items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]
                self.model.appendRow(items)
    
    
    
    def on_pushButton_export_pressed(self):
        
        
        if platform.system() == "Windows":
            b=QgsApplication.qgisSettingsDirPath().replace("/","\\")
                
                
            cmd = os.path.join(os.sep, b, 'python', 'plugins', 'totalopenstation_luncher-master', 'scripts', 'totalopenstation-cli-parser.py')
            cmd2= ' -i '+self.lineEdit_input.text()+' '+'-o '+self.lineEdit_output.text()+' '+'-f'+' '+self.comboBox_format.currentText()+' '+'-t'+' '+self.comboBox_format2.currentText()+' '+'--overwrite'
            #os.system("start cmd /k" + ' python ' +cmd+' '+cmd2)
            subprocess.check_call(['python',cmd, '-i',self.lineEdit_input.text(),'-o',self.lineEdit_output.text(),'-f',self.comboBox_format.currentText(),'-t',self.comboBox_format2.currentText(),'--overwrite'], shell=True)
            
            #Load the layer if the format is geojson or dxf or csv           
            if self.comboBox_format2.currentIndex()== 0:
                
                layer = QgsVectorLayer(self.lineEdit_output.text(), 'totalopenstation', 'ogr')
                
                layer.isValid() 

                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            
                
                temp=tempfile.mkstemp(suffix = '.csv')
                QgsVectorFileWriter.writeAsVectorFormat(layer, 'test.csv', "utf-8", driverName = "CSV")
                
                self.loadCsv('test.csv')
            elif self.comboBox_format2.currentIndex()== 1:
                
                layer = QgsVectorLayer(self.lineEdit_output.text(), 'totalopenstation', 'ogr')
                
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
                                          
                temp=tempfile.mkstemp(suffix = '.csv')
                QgsVectorFileWriter.writeAsVectorFormat(layer, 'test.csv', "utf-8", driverName = "CSV")
                self.loadCsv('test.csv')                     
            
            elif self.comboBox_format2.currentIndex()== 2:
                uri = "file:///"+self.lineEdit_output.text()+"?type=csv&xField=x&yField=y&spatialIndex=no&subsetIndex=no&watchFile=no"
                layer = QgsVectorLayer(uri, 'totalopenstation', "delimitedtext")
                
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            

                self.loadCsv(self.lineEdit_output.text())
                
                

            
            else:
                pass
        else:
            b=QgsApplication.qgisSettingsDirPath()
            cmd = os.path.join(os.sep, b, 'python', 'plugins', 'totalopenstation_luncher-master', 'scripts', 'totalopenstation-cli-parser.py')
            cmd2= ' -i '+self.lineEdit_input.text()+' '+'-o '+self.lineEdit_output.text()+' '+'-f'+' '+self.comboBox_format.currentText()+' '+'-t'+' '+self.comboBox_format2.currentText()+' '+'--overwrite'
            #os.system("start cmd /k" + ' python ' +cmd+' '+cmd2)
            subprocess.check_call(['python',cmd, '-i',self.lineEdit_input.text(),'-o',self.lineEdit_output.text(),'-f',self.comboBox_format.currentText(),'-t',self.comboBox_format2.currentText(),'--overwrite'], shell=True)
            
            #Load the layer if the format is geojson or dxf or csv           
            if self.comboBox_format2.currentIndex()== 0:
                
                layer = QgsVectorLayer(self.lineEdit_output.text(), 'totalopenstation', 'ogr')
                
                layer.isValid() 

                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            
            
                r=open(self.lineEdit_output.text(),'r')
                lines = r.read().split(',')
                self.textEdit.setText(str(lines))
            elif self.comboBox_format2.currentIndex()== 1:
                
                layer = QgsVectorLayer(self.lineEdit_output.text(), 'totalopenstation', 'ogr')
                
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
                                          
                r=open(self.lineEdit_output.text(),'r')
                lines = r.read().split(',')
                self.textEdit.setText(str(lines))                          
            
            elif self.comboBox_format2.currentIndex()== 2:
                uri = "file:///"+self.lineEdit_output.text()+"?type=csv&xField=x&yField=y&spatialIndex=no&subsetIndex=no&watchFile=no"
                layer = QgsVectorLayer(uri, 'totalopenstation', "delimitedtext")
                
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            

                self.loadCsv(self.lineEdit_output.text())
                
                

            
            else:
                pass
    
    
        
    def on_pushButton_connect_pressed(self):
        try:
            
            if platform.system() == "Windows":
                b=QgsApplication.qgisSettingsDirPath().replace("/","\\")
                cmd = os.path.join(os.sep, b , 'python', 'plugins', 'totalopenstation_luncher-master', 'scripts', 'totalopenstation-cli-connector.py')
                
                subprocess.check_call(['python', cmd,'-m',self.comboBox_model.currentText(),'-p',self.comboBox_port.currentText(),'-o',self.lienEdit_save_raw.text()], shell=True)
                layer = QgsVectorLayer(self.lineEdit_save_raw.text(), 'totalopenstation', 'ogr')
                    
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            else:
                b=QgsApplication.qgisSettingsDirPath()
                cmd = os.path.join(os.sep, b , 'python', 'plugins', 'totalopenstation_luncher-master', 'scripts', 'totalopenstation-cli-connector.py')
                #os.system("start cmd /k" + ' python ' +cmd)
                subprocess.check_call(['python', cmd,'-m',self.comboBox_model.currentText(),'-p',self.comboBox_port.currentText(),'-o',self.lienEdit_save_raw.text()], shell=True)
                
                layer = QgsVectorLayer(self.lineEdit_save_raw.text(), 'totalopenstation', 'ogr')
                    
                layer.isValid() 

                
                QgsProject.instance().addMapLayer(layer)

                QMessageBox.warning(self, 'Total Open Station luncher',
                                          'data loaded into panel Layer', QMessageBox.Ok)
            
            
            
            self.loadCsv(self.lineEdit_save_raw.text())
            
        
        except:
            pass